堆和栈的区别

1．申请方式
栈（stack）是由系统自动分配的。例如，声明函数中一个局部变量“int b;”，那么系统自动在栈中为b开辟空间。
堆（heap）需要程序员自己申请，并在申请时指定大小。使用C语言中的malloc函数的例子如下所示。

p1 = (char *)malloc(10);  //返回的是一个 void * 类型的指针 因此 需要类型转换

2．申请后系统的响应
堆在操作系统中有一个记录空闲内存地址的链表。当系统收到程序的申请时，系统就会开始遍历该链表，寻
找第一个空间大于所申请空间的堆节点，然后将该节点从空闲节点链表中删除，并将该节点的空间分配给程序。另外，对于大多数系统，
会在这块内存空间中的首地址处记录本次分配的大小。这样，代码中的删除语句才能正确地释放本内存空间。
如果找到的堆节点的大小与申请的大小不相同，系统会自动地将多余的那部分重新放入空闲链表中。
只有栈的剩余空间大于所申请空间，系统才为程序提供内存，否则将报异常，提示栈溢出。

3．申请大小的限制
堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统用链表来存储的空闲内存地址，地址是不连续的，
而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存，因此堆获得的空间比较灵活，也比较大。
栈是向低地址扩展的数据结构，是一块连续的内存区域。因此，栈顶的地址和栈的最大容量是系统预先规定好的，
如果申请的空间超过栈的剩余空间时，将提示栈溢出，因此，能从栈获得的空间较小。

4．申请速度的限制
堆是由malloc等语句分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来很方便。栈由系统自动分配，速度较快，
但程序员一般无法控制。

5．堆和栈中的存储内容
堆一般在堆的头部用一个字节存放堆的大小，堆中的具体内容由程序员安排。
在调用函数时，第一个进栈的是函数调用语句的下一条可执行语句的地址，然后是函数的各个参数，在大多数的C语言编译器中，
参数是由右往左入栈的，然后是函数中的局部变量。当本次函数调用结束后，局部变量先出栈，然后是参数，
最后栈顶指针指向最开始的存储地址，也就是调用该函数处的下一条指令，程序由该点继续运行。


//内存池主要针对的是那些小块  主要是1.分配 2.回收 3.扩容  4.分配的策略和回收的策略