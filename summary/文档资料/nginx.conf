user root root;
worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;/usr/local/openresty/lua-resty-redis/lib/?.lua;;";  #lua 模块  
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";  #c模块 
    
    server {
        listen 80;
        location / {
            default_type 'application/x-javascript;charset=utf-8';
            content_by_lua_file /home/www/lua/index.lua;
        }
        
        location /goods_list_advert {
            #default_type 'application/x-javascript;charset=utf-8';
            content_by_lua_file /home/www/lua/test.lua;
        }
        ##nginx 配合redis
        location /hello {
            #local host = "hello";
           content_by_lua 'ngx.say("<h1>hello,openRestry lua</h1>")';
       }
       location /getByGender {
          default_type 'text/html';
          set_by_lua $param "

                local uri_args = ngx.req.get_uri_args()
                local gender = uri_args['gender']
                local name = uri_args['name']
                if gender =='1' then
                       return name..':先生'
                elseif gender=='0' then
                       return name..':女士'
                else
                       return name
                end
          ";
          charset utf-8;
          return 200 $param;
       }
       #从服务层+mysql获取数据
        location /goods_list_advert_from_data {
            default_type 'application/x-javascript;charset=utf-8';
            content_by_lua '
            ngx.say("从服务层+mysql获取数据")
            ';
        }

 location /redis {
        content_by_lua_block {
        local redis = require "resty.redis"     
        local redisObj = redis:new()            
        redisObj:set_timeout(3000)              
        local ok,err = redisObj:connect("127.0.0.1",6379)    
        if not ok then                          
            ngx.say("failed to connection redis",err)
            return
        end
        ok,err = redisObj:set("username","TOM")     
        if not ok then                              
            ngx.say("failed to set username",err)
            return
        end
        local res,err = redisObj:get("username")    
        ngx.say(res) 
        redisObj:close()
    }
 }

 location /mysql {
     content_by_lua_block{
        default_type "text/html";
        local mysql = require "resty.mysql" 
        local db = mysql:new() 
        local ok,err = db:connect{ 
            host="127.0.0.1", 
            port=3306,
            user="root", 
            password="root", 
            database="study"
        } 
        if not ok then                              
            ngx.say("failed to connect mysql server:",err)
            return
        end
            db:set_timeout(3000) 
            db:send_query("select * from users where id =1") 
            local res,err,errcode,sqlstate = db:read_result() 
            ngx.say(res[1].id..","..res[1].username..","..res[1]. birthday..","..res[1].salary)
            db:close()
    } 
}
    }
}