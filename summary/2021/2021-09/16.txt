1. 内存的分配类型：
     1.分别为 栈区，堆区，全局/静态存储区，常量存储区,代码区
     2.静态内存分配: 编译时分配。包括 全局，静态全局，静态局部三种变量
     3.动态内存分配:运行时分配。包括:栈(stack): 局部变量。堆(heap): 
            c语言中用到的变量被动态的分配在内存中。(malloc或calloc、realloc、free函数)

2.变量的内存分配：

   1.栈区（stack）：指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，
   函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。
   栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。

   2.堆区（heap）：指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，
   直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。

   3.全局数据区（global data）：全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，
   这块空间当程序运行结束后由系统释放。

   4.常量储存区（const）：常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。
   const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。

   5.程序代码区：存放源程序的二进制代码

3.堆和栈区别->c语言的角度分析:

   1、存储方式：
   栈：在函数调用时，栈中存放的是函数中各个参数(局部变量)。栈底下是函数调用后的下一条指令。
   堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。

   2.管理方式:
     栈：由系统自动分配空间，同时系统自动释放空间。例如，声明在函数中一个局部变量“int b“。
     系统自动在栈中为b开辟空间，当对应的生存周期结束后栈空间自动释放。
     堆：需要程序员手动申请并且手动释放，并指明大小。在C语言中malloc函数申请，释放free函数，在C＋＋中new和delete实现。
   
   3.空间大小不同：

     栈：一般情况下是1-8M大小的内存，超过就会栈溢出。
     堆：获得空间根据系统的有效虚拟内存有关，比较灵活，比较大。

   4.回收内存是否产生碎片问题：

     栈：空间连续的，所以不会产生碎片。
     堆：链式存储，会产生碎片。

   5.数据扩展方式：

     栈：向低地址扩展的数据结构，是一块连续的内存的区域。
     堆：向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，
     而链表的遍历方向是由低地址向高地址。

   6.分配方式：
     
     栈：有2种分配方式——静态分配和动态分配。静态由编译器完成，例如局部变量;动态由alloca函数实现，并且编译器会进行释放。
     堆：都是动态分配的，没有静态分配的堆。

   7、分配效率不同：

      栈：由系统自动分配，速度较快。但程序员是无法控制的。
      堆：由new分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来方便。
    