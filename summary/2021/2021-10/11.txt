TCP三次握手的想起过程:

    1. 服务器 listen 时，计算了全/半连接队列的长度，还申请了相关内存并初始化。
    2. 客户端 connect 时，把本地 socket 状态设置成了 TCP_SYN_SENT，选则一个可用的端口，
        发出 SYN 握手请求并启动重传定时器。
    3. 服务器响应 ack 时，会判断下接收队列是否满了，满的话可能会丢弃该请求。否则发出 synack，
       申请 request_sock 添加到半连接队列中，同时启动定时器。
    4. 客户端响应 synack 时，清除了 connect 时设置的重传定时器，把当前 socket 状态设置为 ESTABLISHED，
       开启保活计时器后发出第三次握手的 ack 确认。
    5. 服务器响应 ack 时，把对应半连接对象删除，创建了新的 sock 后加入到全连接队列中，
       最后将新连接状态设置为 ESTABLISHED。
    6. accept 从已经建立好的全连接队列中取出一个返回给用户进程。

2.tcp listen 的作用:

    通过今天对 listen 源码的简单浏览，我们发现 listen 最主要的工作就是申请和初始化接收队列，包括全连接队列和半连接队列。
    其中全连接队列是一个链表，而半连接队列由于需要快速的查找，所以使用的是一个哈希表（其实半连接队列更准确的的叫法应该叫
    半连接哈希表）。

除此之外我们还有额外收获，我们还知道了内核是如何确定全/半连接队列的长度的。

    1.全连接队列的长度
    对于全连接队列来说，其最大长度是 listen 时传入的 backlog 和 net.core.somaxconn 之间较小的那个值。
    如果需要加大全连接队列长度，那么就是调整 backlog 和 somaxconn。

    2.半连接队列的长度
    在 listen 的过程中，内核我们也看到了对于半连接队列来说，其最大长度是 
    min(backlog, somaxconn, tcp_max_syn_backlog) + 1 再上取整到 2 的幂次，但最小不能小于16。
    如果需要加大半连接队列长度，那么需要一并考虑 backlog，somaxconn 和 tcp_max_syn_backlog 这三个参数。
    网上任何告诉你修改某一个参数就能提高半连接队列长度的文章都是错的。


    ss -ant|grep 80  //查看对应的端口号连接