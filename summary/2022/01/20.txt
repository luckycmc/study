上下文简介
context:上下文切换
   首先要理解boost::context的概念和应用场景。程序在执行的时候，当前的执行的代码环境和所处的状态，就是context。
boost::context保留了当前程序执行时的寄存器等的状态，可以认为是一个上下文A；然后线程就可以去执行其他的代码，完
成执行后，可以切回上下文A，并从当初切走的地方执行，而且当初的上下文的现场不变，这就是完成了一次真正意义上的上下文切换。

   上线文切换，在协程和用户态线程等有重要的意义（统称它们为routine），我们可以启动一定数量的操作系统的线程，
然后让routine在OS的thread中切换，切换时仅需要保留有关的上下文即可，通过一定的调度方式，
是的OS的Thread不停的执行这些routine。routine的切换速度，远远快于thread，可极大提高效率。
//  pidstat :查看进程的相关切换信息
/**************汇编的基础知识 start*****************/
%rax 一般用作累加器(Accumulator)
%rbx 一般用作基址寄存器( Base )
%rxc 一般用来计数( Count )
%rdx 一般用来存放数据( Data )
%rsi一般用作源变址( Source Index )
%rdi 一般用作目标变址( DestinatinIndex )
%rbp 一般用作基址指针( Base Pointer )
%rsp 一般用作堆栈指针( Stack Pointer )


%rip 是指令指针，也称为 PC指针




1.PC（program counter）是CPU中用于存放下一条指令地址的寄存器，SP为堆栈指针

2.PC：Program Counter，是通用寄存器，但是有特殊用途，用来指向当前运行指令的下一条指令。

3.SP：Stack Pointer，堆栈指针，也是通用寄存器，用于入栈和出栈操作。

4.栈 在内存中的原理:
    栈顶的地址要小于栈底的地址，所以栈是从高地址向低地址生长。栈是从高地址向低地址生长的，既栈底在高地址，栈顶低地址。
    也就是说 数据入栈的时候 栈顶往下低地址空间移动,栈顶不变

5.总之，linux任务用户态的堆栈和普通应用程序一样，由操作系统分配和释放，对程序员来说不可见，
        不过因为操作系统的原因，任务用户程序寻址有限制。

6.栈帧
   栈帧，也就是stack frame，其本质就是一种栈，只是这种栈专门用于保存函数调用过程中的各种信息（参数，返回地址，本地变量等）
   。栈帧有栈顶和栈底之分，其中栈顶的地址最低，栈底的地址最高，SP(栈指针)就是一直指向栈顶的。
   我们用 %ebp 指向栈底，也就是基址指针；用 %esp 指向栈顶，也就是栈指针。 

7. 
   我们知道最主要有三个寄存器：%rip程序计数器指向下一条需要执行的指令，%rbp指向函数栈帧底部，%rsp指向函数栈帧顶部。
   这三个寄存器可以确定一个c栈执行上下文，c栈的管理其实就是这些寄存器的管理。

8.X86-64寄存器的变化，不仅体现在位数上，更加体现在寄存器数量上。新增加寄存器%r8到%r15。
   加上 x86的原有8个，一共16个寄存器。 刚刚说到，寄存器集成在CPU上，存取速度比存储器快好几个数量级，
   寄存器多了，GCC就可以更多的 使用寄存器，替换之前的存储器堆栈使用，从而大大提升性能。 
   让寄存器为己所用，就得了解它们的用途，这些用途都涉及函数调用，X86-64有16个64位寄存器，
   分 别是：%rax，%rbx，%rcx，%rdx，%esi，%edi，%rbp，%rsp， %r8，%r9，%r10，%r11，%r12，%r13，
   %r14，%r15。其中： %rax 作为函数返回值使用。 %rsp 栈指针寄存器，指向栈顶 %rdi，%rsi，%rdx，%rcx，
   r8，%r9 用作函数参数，依次对应第1参数，第2参数。。。 %rbx，%rbp，%r12，%r13，%14，%15 
   用作数据存储，遵循被调用者使用规则，简单说就是随便 用，调用子函数之前要备份它，
   以防他被修改 %r10，%r11 用作数据存储，遵循调用者使用规则，简单说就是使用之前要先保存原值


9.栈帧结构 C语言属于面向过程语言，他最大特点就是把一个程序分解成若干过程（函数），
   比如：入口函数是 main，然后调用各个子函数。在对应机器语言中，GCC把过程转化成栈帧（frame），
   简单的说，每个 栈帧对应一个过程。X86-32典型栈帧结构中，由%ebp指向栈帧开始，%esp指向栈顶。

10.相比于异步回调程序，协程会增加一些内存管理的开销。有一定性能损耗。经过压测QPS依然可以达到较高的水平。

/**************汇编的基础知识 end*****************/