3)x86_64含有16个64为整数寄存器

%rsi,%rdi 用于字符串处理

%rsp,%rbp 栈相关,栈从高地址到低地址 %rsp ---> 栈顶，push和pop会改变 %rbp ---> 栈基址

%8~%15

5)函数的调用约定

a.整型参数依次存放在 %rdi,%rsi,%rdx,%rcx,%8,%9

b.浮点参数依次存放在%xmm0 - %xmm7中

c.寄存器不够用时，参数放到栈中

d.被调用的函数可以使用任何寄存器，但它必须保证%rbx,%rbp,%rsp,and %12-%15恢复到原来的值

e.返回值存放在%rax中

6)调用函数前

调用方要将参数放到寄存器中

然后把%10,%11的值保存到栈中

然后调用call 跳转到函数执行

返回后，恢复%10,%11

从%eax中取出返回值

简单初步理解堆栈：

1、就是一块内存，操作系统在程序启动时候就分配好的，供程序执行使用。


3、堆栈是程序执行所用，从下往上使用，如果堆栈用完，会“堆栈溢出”程序也会崩溃。

4、栈指针寄存器（ESP）:指向当前栈的地址，可以右键选择“flow” 也称为栈基(栈顶的基地址)

我们仍可以继续使用mov指令往堆栈中存入数据，具体操作如下：

1、首先在ESP指针定位到目前栈的位置。(也就是栈的基地址)

2、使用mov指令存入数据。

3、使用sub指令更改ESP指向地址。

一 、寄存器地址用来保存当前CPU所访问的内存单元的地址(寄存器存放的是地址)

二、寄存器地址和内存地址的区别

1、范围不同

寄存器地址用来保存当前CPU所访问的内存单元的地址，即数据放在寄存器中的地址。

内存地址是一种用于软件及硬件等不同层级中的数据概念，用来访问电脑主存中的数据，即数据放在内存中的地址。

2、存取速度不同

寄存器在CPU内部，只能存少量的信息，但是存取速度特别快。

内存指的是内存条、存储器，由于一半的硬盘读取速度很慢，所以用先将硬盘里面的东西读取到内存条里面，然后在给CPU进行处理，这样是为了加快系统的运行速度。内存离CPU比较远，所以消费更长的时间储存。 

3、使用方式不同  

寄存器地址的使用方式只有2步：

（1）找到相关的位

（2）读取这些位 

内存地址的使用方式复杂多： 

（1）找到数据的指针（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。） 

（2）将指针送往内存管理单元（MMU），由MMU讲虚拟的内存地址翻译成实际的物理地址。 

（3）将物理地址送往内存控制器（memory controller）,由于内存控制器找出该地址在哪一根内存插槽（bank）上. 

（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。 

（5）内存先送回内存控制器，再送回CPU，然后开始使用。
