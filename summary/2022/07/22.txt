1.PHP虚拟机也是计算机，有三点是我们需要重点关注的：指令集
   （包含指令处理函数）、数据存储（zval）、函数栈帧；

2.此时虚拟机已可以接受指令并执行指令代码

3.设计虚拟机时，首先应该考虑三个要素：指令，数据存储，函数栈帧；

栈与堆的介绍
栈： 是由编译器自动分配和释放的，即在执行函数时，函数内局部变量的存储单元都可以在栈上创建，
函数执行结束时这些存储单元将被自动释放。需要注意的是，栈内存分配运算内置于处理器的指令集中，
它的运行效率一般很高，但是分配的内存容量有限。
例如:
  int main()
  {
      int a // 栈
      char arr[] ="abcd"; //栈：
      char *p // 栈
  }


  像这种一般在函数内部直接申请的变量所用到的内存就是栈分配的，
  上面这段main函数中所申请的空间在main函数函数执行结束后所有的变量都将被自动释放。
  如果是一个被调用的函数，在函数被调用的时候申请变量，在函数被调用结束的时候就会释放空间
  /***************************end **********************************/
堆： 由程序员分配释放，若程序员不释放，程序结束是由OS进行回收，它的分配方式类似于链表。
程序在运行的时候由程序员使用内存分配函数（如 malloc 函数）来申请任意多少的内存，
使用完之后再由程序员自己负责使用内存释放函数（如 free 函数）来释放内存。也就是说，
动态内存的整个生存期是由程序员自己决定的，使用非常灵活。需要注意的是，
如果在堆上分配了内存空间，就必须及时释放它，否则将会导致运行的程序出现内存泄漏等错误。

int main()
{
    //c语言中使用malloc 申请
    char *p1 = malloc(char *)malloc(5);
    if(p1 == NULL){
        printf(Application space failed\n);
        return;
    }
    // 使用free函数释放
    free(p1);
}

栈与堆的不同
1.管理方式不同。 栈由操作系统自动分配释放，不需要我们手动控制；堆的申请和释放工作由程序员控制，
    因此容易产生内存泄漏。
2.空间大小不同。 栈的大小一般只有8~10M，而堆有几个G。
生长方向不同。 栈的生长方向向下，内存的地址由高到低，堆的生长方向向上，
    内存的地址由低到高。
3.分配方式不同。 堆时动态分配的；栈有两种分配方式：静态分配和动态分配。
    静态分配是由操作系统完成，比如局部变量的分配。动态分配由malloc函数进行分配，
    但是栈的动态分配和堆是不同的，栈的动态分配是由操作系统进行释放，不需要我们手动释放。
4.分配效率不同。栈由操作系统自动分配，会在硬件层级对栈提供支持。分配专门的寄存器存放栈的地址，
    压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。
    堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制比较复杂，
    频繁的内存申请容易产生内存碎片。显然，堆的效率比栈低得多。
5.分配的碎片问题。 对堆来说，频繁分配和释放（malloc / free）不同大小的堆空间势必会造成
内存空间的不连续，从而造成大量碎片，导致程序效率降低；而对栈来讲，则不会存在这个问题。





