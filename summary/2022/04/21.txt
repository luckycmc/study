从PHP-FPM切换到Swoole性能提升主要是对象持久化带来的，PHP-FPM模式下，
请求开始会初始化很多对象、数组、资源、TCP 连接（以下统称对象），在请求结束后会立即销毁，
这带来了大量CPU和内存开销。

切换到Swoole之后，可以将与请求无关的对象保存在内存中持久化。尤其是现在PHP框架越来越重，
像Laravel，一次请求会创建成百上千个对象，而绝大部分是可以常驻内存的，不需要随着请求创建销毁，
这样就会带来巨大的性能提升。

但是如果你的程序只是简单地从PHP-FPM切换为Swoole，实际上无法获得性能提升。反而如果设置不当，
如阻塞模式但是确开启了协程、进程数设置过低，反而性能还不如PHP-FPM。

另外需要知道Swoole提供的协程不能直接提升性能，协程是为了解决IOWait和高并发问题。
避免一个慢查询导致整个系统崩溃。而且一个Worker进程可以同时并发地处理大量请求，
而PHP-FPM一个请求同一时间只能处理一个请求，系统最大并发处理能力取决于所配置的进程数量。

而当PHP-FPM配置了数百、甚至数千个进程后，带来的进程切换开销（context switch）会非常大，
操作系统有大量的CPU资源用于处理切换，变得低效。这时协程会提供比较客观的性能提升。

