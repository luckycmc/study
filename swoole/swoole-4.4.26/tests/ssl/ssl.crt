-----BEGIN CERTIFICATE-----
MIICAzCCAWwCCQCgnsxsw2bDrDANBgkqhkiG9w0BAQsFADBFMQswCQYDVQQGEwJB
VTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0
cyBQdHkgTHRkMCAXDTE0MDcwOTE0MTIxNloYDzIxMTQwNjE1MTQxMjE2WjBFMQsw
CQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJu
ZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDP
nYsgGr6Q9jqL97xGo2zxrOWGQd96PnItf5uOdvZJjwTLsN8an33UOtFVxwGIaTb8
MtuXiLZbslKWLIOoqq0Lk92RwF4Zxs02Yt+S1sM/9ST7tiJQKYx1+rfaZIj0Dy9y
VoWHGfRmVZMcWkhslaHR/Yz+Ul4CIqr03/BjYjjQfQIDAQABMA0GCSqGSIb3DQEB
CwUAA4GBAJIjeaUeizJ88G1M9fFUTwf11ywWsrzIQxCaMqmzRyrlIhwuC5qXKsA/
wHRfj9+KnfJ1LOAguXa/CSRFCogQnYur4+Kzy/PBchMFjIKS9UzmQQWZYsmzBgTX
e6pGJN2fxTmpGKf0lj7//NWxOmFDFWgyUeIR4TaAJ5dWpS8Cr0Gc
-----END CERTIFICATE-----
---------------------------------------------------------------------+
  | Author: Tianfeng Han  <mikan.tenny@gmail.com>                        |
  +----------------------------------------------------------------------+
*/

#include "swoole.h"
#include <sys/ipc.h>
#include <sys/msg.h>

int swQueueMsg_in(swQueue *p, swQueue_data *in, int data_length);
int swQueueMsg_out(swQueue *p, swQueue_data *out, int buffer_length);
void swQueueMsg_free(swQueue *p);

typedef struct _swQueueMsg
{
	int msg_id;
	int ipc_wait;
	long type;
} swQueueMsg;

void swQueueMsg_free(swQueue *p)
{
	swQueueMsg *object = p->object;
	msgctl(object->msg_id, IPC_RMID, 0);
	sw_free(object);
}

int swQueueMsg_create(swQueue *p, int blocking, int msg_key, long type)
{
	int msg_id;
	swQueueMsg *object = sw_malloc(sizeof(swQueueMsg));
	if (object == NULL)
	{
		return -1;
	}
	if (blocking == 0)
	{
		object->ipc_wait = IPC_NOWAIT;
	}
	else
	{
		object->ipc_wait = 0;
	}
	p->blocking = blocking;
	msg_id = msgget(msg_key, IPC_CREAT | O_EXCL | 0666);
	if (msg_id < 0)
	{
		swWarn("msgget() failed. Error: %s[%d]", strerror(errno), errno);
		return SW_ERR;
	}
	else
	{
		object->msg_id = msg_id;
		object->type = type;
		p->object = object;
		p->in = swQueueMsg_in;
		p->out = swQueueMsg_out;
		p->free = swQueueMsg_free;
	}
	return 0;
}

int swQueueMsg_out(swQueue *p, swQueue_data *data, int length)
{
	swQueueMsg *object = p->object;

	int flag = object->ipc_wait;
	long type = data->mtype;

	return msgrcv(object->msg_id, data, length, type, flag);
}

int swQueueMsg_in(swQueue *p, swQueue_data *in, int length)
{
	int ret;
	swQueueMsg *object = p->object;

	while (1)
	{
		//send一定不可以阻塞
		ret = msgsnd(object->msg_id, in, length, IPC_NOWAIT);
		if (ret < 0)
		{
			if (errno == EINTR)
			{
				continue;
			}
			else if(errno == EAGAIN)
			{
				swYield();
				continue;
			}
			else
			{
				return -1;
			}
		}
		else
		{
			return ret;
		}
	}
	return 0;
}
